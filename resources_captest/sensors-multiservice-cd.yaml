# FAQ:
# Q: Why does the example-multiservice-deploy2 GitOps repo have 4 sensor resources instead of just 1?
# A: The example-multiservice-deploy2 GitOps repo has subdirectories for 4 environments. In order to detect changes
#    separately for each subdirectory, you need to define 4 dependencies. However, a sensor won't let you have multiple
#    dependencies that all refer to the same eventSourceName + eventSource. So you must create 4 separate sensors, each
#    with 1 dependency for 1 environment.

# TO-DO
# -  Enhance GIT_FILES_MODIFIED and GIT_FILES_ADDED to include files from ALL commits in the push. They currently only
#    include files from the last commit (HEAD) in the push.

# To debug a sensor:
# 1. get or describe the sensor to look for obvious errors in its "status"
#    kubectl describe sensor multiservice-cd-test | tail -12
# 2. Check the sensor pod's logs
#    kubectl logs multiservice-cd-test-7zswg-8dcc5985-qx2xw | less

---
apiVersion: argoproj.io/v1alpha1
kind: Sensor
metadata:
  name: multiservice-cd-test
spec:
  eventBusName: codefresh-eventbus
  template:
    serviceAccountName: argo
  # Specify Git conditions when the trigger should fire
  dependencies:
    - name: multiservice-test
      eventSourceName: github1
      eventName: push
      filters:
        data:
          - path: body.repository.owner.name
            type: string
            value:
              - codefresh-contrib
          - path: body.repository.name
            type: string
            value:
              - example-multiservice-deploy2
          # filter monorepo changes for only the "test" subdirectory
          # Example body.head_commit.modified string: '["test/values.yaml", "test/chart.yaml"]'
          - path: body.head_commit.modified
            type: string
            value:
              - "true"
            template: '{{ contains "\"test/" .Input }}'
  # Trigger fires the workflow
  triggers:
    - retryStrategy:
        steps: 3
      template:
        # conditions: "multiservice-test"  # you can combine dependencies with && and ||
        name: multiservice-cd-test
        argoWorkflow:
          version: v1alpha1
          group: argoproj.io
          resource: workflows
          operation: submit
          source:
            resource:
              apiVersion: argoproj.io/v1alpha1
              kind: Workflow
              metadata:
                generateName: multiservice-cd-test-
              spec:
                workflowTemplateRef:
                  name: cd-simple
                arguments:
                  parameters:
                    - name: GIT_REPO_URL
                    - name: GIT_REVISION
                    - name: GIT_BRANCH
                    - name: GIT_FILES_MODIFIED
                    - name: GIT_FILES_ADDED
                    - name: GIT_REPO_OWNER
                    - name: GIT_REPO_NAME
                    - name: GIT_COMMIT_MESSAGE
                    - name: GIT_COMMIT_URL
                    - name: INFO
                    - name: ARGOCD_APP
                      value: multiservice-test
                    - name: ARGOCD_SERVER
                      value: argocd-server.captest
          parameters:
            - dest: spec.arguments.parameters.0.value  # GIT_REPO_URL
              src:
                dependencyName: multiservice-test
                dataKey: body.repository.clone_url
            - dest: spec.arguments.parameters.1.value  # GIT_REVISION
              src:
                dependencyName: multiservice-test
                dataKey: body.after
            - dest: spec.arguments.parameters.2.value  # GIT_BRANCH
              src:
                dependencyName: multiservice-test
                dataTemplate: "{{ trimPrefix \"refs/heads/\" .Input.body.ref }}"
            - dest: spec.arguments.parameters.3.value  # GIT_FILES_MODIFIED
              # TO-DO - include modified files from ALL commits of the push
              src:
                dependencyName: multiservice-test
                dataKey: body.head_commit.modified
            - dest: spec.arguments.parameters.4.value  # GIT_FILES_ADDED
              # TO-DO - include added files from ALL commits of the push
              src:
                dependencyName: multiservice-test
                dataKey: body.head_commit.added
            - dest: spec.arguments.parameters.5.value  # GIT_REPO_OWNER
              src:
                dependencyName: multiservice-test
                dataKey: body.repository.owner.name
            - dest: spec.arguments.parameters.6.value  # GIT_REPO_NAME
              src:
                dependencyName: multiservice-test
                dataKey: body.repository.name
            - dest: spec.arguments.parameters.7.value  # GIT_COMMIT_MESSAGE
              src:
                dependencyName: multiservice-test
                dataKey: body.head_commit.message
            - dest: spec.arguments.parameters.8.value  # GIT_COMMIT_URL
              src:
                dependencyName: multiservice-test
                dataKey: body.head_commit.url
            - dest: spec.arguments.parameters.9.value  # INFO
              src:
                dependencyName: multiservice-test
                dataKey: body.commits
                value: "default val"
              value: "default val"

---
apiVersion: argoproj.io/v1alpha1
kind: Sensor
metadata:
  name: multiservice-cd-qa
spec:
  eventBusName: codefresh-eventbus
  template:
    serviceAccountName: argo
  # Specify Git conditions when the trigger should fire
  dependencies:
    - name: multiservice-qa
      eventSourceName: github1
      eventName: push
      filters:
        data:
          - path: body.repository.owner.name
            type: string
            value:
              - codefresh-contrib
          - path: body.repository.name
            type: string
            value:
              - example-multiservice-deploy2
          # filter monorepo changes for only the "qa" subdirectory
          # Example body.head_commit.modified string: '["qa/values.yaml", "qa/chart.yaml"]'
          - path: body.head_commit.modified
            type: string
            value:
              - "true"
            template: '{{ contains "\"qa/" .Input }}'
  # Trigger fires the workflow
  triggers:
    - retryStrategy:
        steps: 3
      template:
        # conditions: "multiservice-qa"  # you can combine dependencies with && and ||
        name: multiservice-cd-qa
        argoWorkflow:
          version: v1alpha1
          group: argoproj.io
          resource: workflows
          operation: submit
          source:
            resource:
              apiVersion: argoproj.io/v1alpha1
              kind: Workflow
              metadata:
                generateName: multiservice-cd-qa-
              spec:
                workflowTemplateRef:
                  name: cd-simple
                arguments:
                  parameters:
                    - name: GIT_REPO_URL
                    - name: GIT_REVISION
                    - name: GIT_BRANCH
                    - name: GIT_FILES_MODIFIED
                    - name: GIT_FILES_ADDED
                    - name: GIT_REPO_OWNER
                    - name: GIT_REPO_NAME
                    - name: GIT_COMMIT_MESSAGE
                    - name: GIT_COMMIT_URL
                    - name: INFO
                    - name: ARGOCD_APP
                      value: multiservice-qa
                    - name: ARGOCD_SERVER
                      value: argocd-server.captest
          parameters:
            - dest: spec.arguments.parameters.0.value  # GIT_REPO_URL
              src:
                dependencyName: multiservice-qa
                dataKey: body.repository.clone_url
            - dest: spec.arguments.parameters.1.value  # GIT_REVISION
              src:
                dependencyName: multiservice-qa
                dataKey: body.after
            - dest: spec.arguments.parameters.2.value  # GIT_BRANCH
              src:
                dependencyName: multiservice-qa
                dataTemplate: "{{ trimPrefix \"refs/heads/\" .Input.body.ref }}"
            - dest: spec.arguments.parameters.3.value  # GIT_FILES_MODIFIED
              # TO-DO - include modified files from ALL commits of the push
              src:
                dependencyName: multiservice-qa
                dataKey: body.head_commit.modified
            - dest: spec.arguments.parameters.4.value  # GIT_FILES_ADDED
              # TO-DO - include added files from ALL commits of the push
              src:
                dependencyName: multiservice-qa
                dataKey: body.head_commit.added
            - dest: spec.arguments.parameters.5.value  # GIT_REPO_OWNER
              src:
                dependencyName: multiservice-qa
                dataKey: body.repository.owner.name
            - dest: spec.arguments.parameters.6.value  # GIT_REPO_NAME
              src:
                dependencyName: multiservice-qa
                dataKey: body.repository.name
            - dest: spec.arguments.parameters.7.value  # GIT_COMMIT_MESSAGE
              src:
                dependencyName: multiservice-qa
                dataKey: body.head_commit.message
            - dest: spec.arguments.parameters.8.value  # GIT_COMMIT_URL
              src:
                dependencyName: multiservice-qa
                dataKey: body.head_commit.url
            - dest: spec.arguments.parameters.9.value  # INFO
              src:
                dependencyName: multiservice-qa
                dataKey: body.commits
                value: "default val"
              value: "default val"

---
apiVersion: argoproj.io/v1alpha1
kind: Sensor
metadata:
  name: multiservice-cd-stage
spec:
  eventBusName: codefresh-eventbus
  template:
    serviceAccountName: argo
  # Specify Git conditions when the trigger should fire
  dependencies:
    - name: multiservice-stage
      eventSourceName: github1
      eventName: push
      filters:
        data:
          - path: body.repository.owner.name
            type: string
            value:
              - codefresh-contrib
          - path: body.repository.name
            type: string
            value:
              - example-multiservice-deploy2
          # filter monorepo changes for only the "stage" subdirectory
          # Example body.head_commit.modified string: '["stage/values.yaml", "stage/chart.yaml"]'
          - path: body.head_commit.modified
            type: string
            value:
              - "true"
            template: '{{ contains "\"stage/" .Input }}'
  # Trigger fires the workflow
  triggers:
    - retryStrategy:
        steps: 3
      template:
        # conditions: "multiservice-stage"  # you can combine dependencies with && and ||
        name: multiservice-cd-stage
        argoWorkflow:
          version: v1alpha1
          group: argoproj.io
          resource: workflows
          operation: submit
          source:
            resource:
              apiVersion: argoproj.io/v1alpha1
              kind: Workflow
              metadata:
                generateName: multiservice-cd-stage-
              spec:
                workflowTemplateRef:
                  name: cd-simple
                arguments:
                  parameters:
                    - name: GIT_REPO_URL
                    - name: GIT_REVISION
                    - name: GIT_BRANCH
                    - name: GIT_FILES_MODIFIED
                    - name: GIT_FILES_ADDED
                    - name: GIT_REPO_OWNER
                    - name: GIT_REPO_NAME
                    - name: GIT_COMMIT_MESSAGE
                    - name: GIT_COMMIT_URL
                    - name: INFO
                    - name: ARGOCD_APP
                      value: multiservice-stage
                    - name: ARGOCD_SERVER
                      value: argocd-server.captest
          parameters:
            - dest: spec.arguments.parameters.0.value  # GIT_REPO_URL
              src:
                dependencyName: multiservice-stage
                dataKey: body.repository.clone_url
            - dest: spec.arguments.parameters.1.value  # GIT_REVISION
              src:
                dependencyName: multiservice-stage
                dataKey: body.after
            - dest: spec.arguments.parameters.2.value  # GIT_BRANCH
              src:
                dependencyName: multiservice-stage
                dataTemplate: "{{ trimPrefix \"refs/heads/\" .Input.body.ref }}"
            - dest: spec.arguments.parameters.3.value  # GIT_FILES_MODIFIED
              # TO-DO - include modified files from ALL commits of the push
              src:
                dependencyName: multiservice-stage
                dataKey: body.head_commit.modified
            - dest: spec.arguments.parameters.4.value  # GIT_FILES_ADDED
              # TO-DO - include added files from ALL commits of the push
              src:
                dependencyName: multiservice-stage
                dataKey: body.head_commit.added
            - dest: spec.arguments.parameters.5.value  # GIT_REPO_OWNER
              src:
                dependencyName: multiservice-stage
                dataKey: body.repository.owner.name
            - dest: spec.arguments.parameters.6.value  # GIT_REPO_NAME
              src:
                dependencyName: multiservice-stage
                dataKey: body.repository.name
            - dest: spec.arguments.parameters.7.value  # GIT_COMMIT_MESSAGE
              src:
                dependencyName: multiservice-stage
                dataKey: body.head_commit.message
            - dest: spec.arguments.parameters.8.value  # GIT_COMMIT_URL
              src:
                dependencyName: multiservice-stage
                dataKey: body.head_commit.url
            - dest: spec.arguments.parameters.9.value  # INFO
              src:
                dependencyName: multiservice-stage
                dataKey: body.commits
                value: "default val"
              value: "default val"

---
apiVersion: argoproj.io/v1alpha1
kind: Sensor
metadata:
  name: multiservice-cd-prod
spec:
  eventBusName: codefresh-eventbus
  template:
    serviceAccountName: argo
  # Specify Git conditions when the trigger should fire
  dependencies:
    - name: multiservice-prod
      eventSourceName: github1
      eventName: push
      filters:
        data:
          - path: body.repository.owner.name
            type: string
            value:
              - codefresh-contrib
          - path: body.repository.name
            type: string
            value:
              - example-multiservice-deploy2
          # filter monorepo changes for only the "prod" subdirectory
          # Example body.head_commit.modified string: '["prod/values.yaml", "prod/chart.yaml"]'
          # - path: body.head_commit.modified
          - path: body.commits
            type: string
            value:
              - "true"
            template: '{{ contains "\"prod/" .Input }}'
  # Trigger fires the workflow
  triggers:
    - retryStrategy:
        steps: 3
      template:
        # conditions: "multiservice-prod"  # you can combine dependencies with && and ||
        name: multiservice-cd-prod
        argoWorkflow:
          version: v1alpha1
          group: argoproj.io
          resource: workflows
          operation: submit
          source:
            resource:
              apiVersion: argoproj.io/v1alpha1
              kind: Workflow
              metadata:
                generateName: multiservice-cd-prod-
              spec:
                workflowTemplateRef:
                  name: cd-simple
                arguments:
                  parameters:
                    - name: GIT_REPO_URL
                    - name: GIT_REVISION
                    - name: GIT_BRANCH
                    - name: GIT_FILES_MODIFIED
                    - name: GIT_FILES_ADDED
                    - name: GIT_REPO_OWNER
                    - name: GIT_REPO_NAME
                    - name: GIT_COMMIT_MESSAGE
                    - name: GIT_COMMIT_URL
                    - name: INFO
                      # value: default-val
                    - name: ARGOCD_APP
                      value: multiservice-prod
                    - name: ARGOCD_SERVER
                      value: argocd-server.captest
          parameters:
            - dest: spec.arguments.parameters.0.value  # GIT_REPO_URL
              src:
                dependencyName: multiservice-prod
                dataKey: body.repository.clone_url
            - dest: spec.arguments.parameters.1.value  # GIT_REVISION
              src:
                dependencyName: multiservice-prod
                dataKey: body.after
            - dest: spec.arguments.parameters.2.value  # GIT_BRANCH
              src:
                dependencyName: multiservice-prod
                dataTemplate: "{{ trimPrefix \"refs/heads/\" .Input.body.ref }}"
            - dest: spec.arguments.parameters.3.value  # GIT_FILES_MODIFIED
              # TO-DO - include modified files from ALL commits of the push
              src:
                dependencyName: multiservice-prod
                dataKey: body.head_commit.modified
            - dest: spec.arguments.parameters.4.value  # GIT_FILES_ADDED
              # TO-DO - include added files from ALL commits of the push
              src:
                dependencyName: multiservice-prod
                dataKey: body.head_commit.added
            - dest: spec.arguments.parameters.5.value  # GIT_REPO_OWNER
              src:
                dependencyName: multiservice-prod
                dataKey: body.repository.owner.name
            - dest: spec.arguments.parameters.6.value  # GIT_REPO_NAME
              src:
                dependencyName: multiservice-prod
                dataKey: body.repository.name
            - dest: spec.arguments.parameters.7.value  # GIT_COMMIT_MESSAGE
              src:
                dependencyName: multiservice-prod
                dataKey: body.head_commit.message
            - dest: spec.arguments.parameters.8.value  # GIT_COMMIT_URL
              src:
                dependencyName: multiservice-prod
                dataKey: body.head_commit.url
            - dest: spec.arguments.parameters.9.value  # INFO
              src:
                dependencyName: multiservice-prod
                dataKey: body.commits
                # value: default-val
